// Logan Keig & Cory Nettnin COSC301_Proj01
// 9-28-14

#include <sys/time.h>
#include <sys/resource.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>

#include "list.h"

void process_data(FILE *input_file) {
    // !! your code should start here.  the input_file parameter
    // is an already-open file.  you can read data from it using
    // the fgets() C library function.  close it with the fclose()
    // built-in function
	struct rusage userUsage, systemUsage;
	struct timeval userStart, userEnd, systemStart, systemEnd;
	getrusage(RUSAGE_SELF, &userUsage);
	getrusage(RUSAGE_SELF, &systemUsage);
	userStart = userUsage.ru_utime;
	systemStart = systemUsage.ru_stime;
/* //this is from when we tried to be fancy
	//input from stdin
	if(input_file == stdin) {
		char buffer[240];
		char finalstr[666];
		while(1) {
			printf("Enter a value (Ctrl+D to exit): ");
			if(fgets(buffer,240,stdin) == NULL) {
				break;
			}
			strcat(finalstr,buffer);
			printf("%s\n",finalstr);
		}
		printf("\n");
	}
*/
	//iterate through the file + make a counter to count up the total size of the file
	char str[sizeof(*input_file)] = "";
	int maxSize = 0;
	while(fgets(str,sizeof(*input_file),input_file) != NULL) {
		maxSize += sizeof(*input_file); //counting up total size of the file
	}
	
	char finalstr[maxSize]; //initialize a single string for the whole file
	
	//iterate through the file again, this time putting the whole thing as a single string for tokenify to work with
	rewind(input_file); //resets fgets
	while(fgets(str,sizeof(*input_file),input_file) != NULL) {
		strcat(finalstr,str);
	}
	deleteComments(finalstr);
	char** tokens = tokenify(finalstr);
	//printf("%s",finalstr);
	refineToken(tokens);
	//print_tokens(tokens);

	//linked list creation
	struct node *head = NULL;
	int i = 0;
    while (tokens[i] != NULL) {
		list_append(tokens[i],&head);
        i++;
    }
	free_tokens(tokens); //appears to work (checked using valgrind ... --leak-check=full)
	//list_print(head);
	list_sort(&head);
	
	getrusage(RUSAGE_SELF, &userUsage);
	getrusage(RUSAGE_SELF, &systemUsage);
	systemEnd = systemUsage.ru_stime;
	userEnd = userUsage.ru_utime;
	
	float userTime = (userEnd.tv_sec + userEnd.tv_usec) - (userStart.tv_sec + userStart.tv_usec);
	float systemTime = (systemEnd.tv_sec + systemEnd.tv_usec) - (systemStart.tv_sec + systemStart.tv_usec);
	printStats(head,userTime,systemTime);
	
	list_clear(head);
}


void usage(char *program) {
    fprintf(stderr, "usage: %s [<datafile>]\n", program);
    exit(1);
}

#ifndef AUTOTEST
int main(int argc, char **argv) {
    FILE *datafile = NULL;
	
    /* find out how we got invoked and deal with it */
    switch (argc) {
        case 1:
            /* only one program argument (the program name) */ 
            /* just equate stdin with our datafile */
            datafile = stdin;
            break;

        case 2:
            /* two arguments: program name and input file */
            /* open the file, assign to datafile */
            datafile = fopen(argv[1], "r");
            if (datafile == NULL) {
                printf("Unable to open file %s: %s\n", argv[1], strerror(errno));
                exit(-1);
            }
            break;

        default:
            /* more than two arguments?  throw hands up in resignation */
            usage(argv[0]);
    }

    /* 
     * you should be able to just read from datafile regardless 
     * whether it's stdin or a "real" file.
     */
    process_data(datafile);
    fclose(datafile);
    return 0;
}
#endif
